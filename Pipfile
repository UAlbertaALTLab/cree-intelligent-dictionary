[[source]]
name = "pypi"
url = "https://pypi.org/simple"
verify_ssl = true

[dev-packages]
black = ">=19.10b0"
pytest = "~=5.1"
pytest-django = "~=3.5"
pytest-cov = "~=2.7"
pytest-datadir = "~=1.3"
pytest-mypy = "~=0.4"
hypothesis = {extras = ["django"],version = "~=4.34"}
xml-subsetter = "~=0.0"
codecov = "*"
snakeviz = "~=2.0"
paramiko = "~=2.6"
pysnooper = "*"
gitdir = "*"
tqdm = "~=4.40"
python-levenshtein = "*"
django-debug-toolbar = "~=2.2"

[packages]
colorama = "~=0.4"
coverage = "~=4.5"
cree-sro-syllabics = "==2019.2.18"
hfstol = "~=1.2.2"
pytz = "==2019.2"
Django = "~=2.2"
creedictionary = {path = "./CreeDictionary",editable = true} # needed to install and use database manager
typing-extensions = "~=3.7"
attrs = "~=19.1"
django-js-reverse = "~=0.9"
fst-lookup = "*"
sortedcontainers = {git = "https://github.com/Madoshakalaka/python-sortedcontainers.git"}

[scripts]
# look stuff up
analyze = "hfst-optimized-lookup CreeDictionary/res/fst/crk-descriptive-analyzer.hfstol"
generate = "hfst-optimized-lookup CreeDictionary/res/fst/crk-normative-generator.hfstol"
# tests
test = "pytest --mypy CreeDictionary/"
# run dev server
dev = "python CreeDictionary/manage.py runserver"
# format
format = "black CreeDictionary"
# Django stuff
make-migrations = "python ./CreeDictionary/manage.py makemigrations"
migrate = "python ./CreeDictionary/manage.py migrate"
collect-static = "python ./CreeDictionary/manage.py collectstatic --clear --no-input"
profile = "python -m profiling"
# reminders/aliases. you can just use $ manage-db after pipenv shell
# see DatabaseManager/readme.md or provide --help to see help
# example usage: manage-db import /res/dictionaries/ --multi-process 2
# This only needs to be done once on the remote server for initial database creation.
manage-db = "manage-db"
import-xml = "manage-db import"
# do this after you change the list of words in res/test_db_words.txt to rebuild test_db.sqlite3
# Supply `-m|--multi-processing N` to speed up
# It takes about half a minute with -m 2
# example usage: pipenv run build-test-db -m 2
build-test-db = "manage-db build-test-db"
# reminders/alias. you can just use $ update-layouts after pipenv shell
# 1. (optional with supplied flag) Pull layout AND paradigm files from old itwewina and place them correctly
# 2. combine them to res/prefilled-layouts/, which is then used at runtime
update-layouts = 'update-layouts'

[requires]
python_version = "3.6" # sapir uses python 3.6.9

[pipenv]
# this allows "black>=19.10b0" to work
allow_prereleases = true
